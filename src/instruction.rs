use crate::register::{Bit, ConditionCode, SimpleRegister, SpecialRegister};

#[allow(non_camel_case_types)]
#[derive(Copy, Clone, Debug)]
pub enum Instruction {
    ADC_A_R8(SimpleRegister),
    ADC_A_HL(u8),
    ADC_A_N8(u8),
    ADD_A_R8(SimpleRegister),
    ADD_A_HL(u8),
    ADD_A_N8(u8),
    AND_A_R8(SimpleRegister),
    AND_A_HL(u8),
    AND_A_N8(u8),
    CP_A_R8(SimpleRegister),
    CP_A_HL(u8),
    CP_A_N8(u8),
    DEC_R8(SimpleRegister),
    DEC_HL(u16),
    INC_R8(SimpleRegister),
    INC_HL(u16),
    OR_A_R8(SimpleRegister),
    OR_A_HL(u8),
    OR_A_N8(u8),
    SBC_A_R8(SimpleRegister),
    SBC_A_HL(u8),
    SBC_A_N8(u8),
    SUB_A_R8(SimpleRegister),
    SUB_A_HL(u8),
    SUB_A_N8(u8),
    XOR_A_R8(SimpleRegister),
    XOR_A_HL(u8),
    XOR_A_N8(u8),
    ADD_HL_R16(SpecialRegister),
    DEC_R16(SpecialRegister),
    INC_R16(SpecialRegister),
    BIT_U3_R8(Bit, SimpleRegister),
    BIT_U3_HL(Bit, u8),
    RES_U3_R8(Bit, SimpleRegister),
    RES_U3_HL(Bit, u16),
    SET_U3_R8(Bit, SimpleRegister),
    SET_U3_HL(Bit, u16),
    SWAP_R8(SimpleRegister),
    SWAP_HL(u16),
    RL_R8(SimpleRegister),
    RL_HL(u16),
    RLA,
    RLC_R8(SimpleRegister),
    RLC_HL(u16),
    RLCA,
    RR_R8(SimpleRegister),
    RR_HL(u16),
    RRA,
    RRC_R8(SimpleRegister),
    RRC_HL(u16),
    RRCA,
    SLA_R8(SimpleRegister),
    SLA_HL(u16),
    SRA_R8(SimpleRegister),
    SRA_HL(u16),
    SRL_R8(SimpleRegister),
    SRL_HL(u16),
    LD_R8_R8(SimpleRegister, SimpleRegister),
    LD_R8_N8(SimpleRegister, u8),
    LD_R16_N16(SpecialRegister, u16),
    LD_HL_R8(u16, SimpleRegister),
    LD_HL_N8(u16, u8),
    LD_R8_HL(SimpleRegister, u8),
    LD_R16_A(SpecialRegister),
    LD_N16_A(u16),
    LDH_N8_A(u8),
    LDH_C_A,
    LD_A_R16(SpecialRegister),
    LD_A_N16(u16),
    LDH_A_N8(u8),
    LDH_A_C,
    LD_HLI_A(u16),
    LD_HLD_A(u16),
    LD_A_HLI(u16),
    LD_A_HLD(u16),
    CALL_N16(u16),
    CALL_CC_N16(ConditionCode, u16),
    JP_HL(u16),
    JP_N16(u16),
    JP_CC_N16(ConditionCode, u16),
    JR_E8(i8),
    JR_CC_E8(ConditionCode, i8),
    RET_CC(ConditionCode),
    RET,
    RETI,
    RST(RstVec),
    ADD_HL_SP(u16, u16),
    ADD_SP_E8(i8),
    DEC_SP(u16),
    INC_SP(u16),
    LD_SP_N16(u16),
    LD_N16_SP(u16),
    LD_HL_SP_E8(i8),
    LD_SP_HL(u16),
    POP_AF,
    POP_R16(SpecialRegister),
    PUSH_AF,
    PUSH_R16(SpecialRegister),
    CCF,
    CPL,
    DAA,
    DI,
    EI,
    HALT,
    NOP,
    SCF,
    STOP,
}

#[derive(Copy, Clone, Debug)]
pub enum RstVec {
    X00 = 0x00,
    X08 = 0x08,
    X10 = 0x10,
    X18 = 0x18,
    X20 = 0x20,
    X28 = 0x28,
    X30 = 0x30,
    X38 = 0x38,
}